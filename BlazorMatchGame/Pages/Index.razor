@page "/"
@using System.Timers
@using BlazorMatchGame.Data

@inject NavigationManager navigator;
@inject User UserService;

<style>
    .container {
        width: 400px; 
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    
    @if (UserService.Username == null)
    {
        navigator.NavigateTo("/user");
    }
    else
    {
        <div class="row">
            @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
            {
                var animal = shuffledAnimals[animalNumber];
                var uniqueDescription = $"Button #{animalNumber}";
                <div class="col-3">
                    <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                            type="button" class="batn btn-outline-dark">
                        <h1>@animal</h1>
                    </button>
                </div>
            }
        </div>
        <div class="row">
            <h2>Matches found: @matchesFound</h2>
        </div>
        <div class="row">
            <h2>Failed Attempts: @mismatchFound</h2>
        </div>
        <div class="row">
            <h2>Time: @timeDisplay</h2>
        </div>
    }
</div>

@code{
    [Inject] protected ILeaderboardService LeaderboardService { get; set; }

    List<string> animalEmoji = new List<string>()
    {
        "🐶","🐶",
        "🐺", "🐺",
        "🐮", "🐮",
        "🦊", "🦊",
        "🐱", "🐱",
        "🦁","🦁",
        "🐯", "🐯",
        "🐹", "🐹",
    };

    List<string> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    int mismatchFound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
        StateHasChanged(); // Adding StateHasChanged to refresh state since it wasn't setting up properly after playing it the first time.
    }

    private async void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            //first selection of the pair. Remember it.
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            timer.Start();
        } else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            //Match found! Reset for next pair.
            lastAnimalFound = string.Empty;

            //replace found animals with emty string to hide them.
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesFound++;
            if(matchesFound == 8)
            {
                timer.Stop();
                // Multiplying tenthsOfSecondsElapsed by 100 since KeepTheScore stores an int based on millisecond.
                await LeaderboardService.UpdatePlayer(UserService, tenthsOfSecondsElapsed * 100);
                timeDisplay += " - Play Again?";
                SetUpGame();
            }
        } else
        {
            //User selected a pair that don't match
            //Reset selection.
            mismatchFound++;
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        });
    }
}