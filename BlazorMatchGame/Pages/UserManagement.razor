@page "/user"

@using BlazorMatchGame.Data
@using BlazorMatchGame.Services
@using System.Text;
@using System.Text.Json

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<h3>Select a Username</h3>
<div class="container">
<EditForm Model=@tmpUser OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="Username">Username</label>
        <InputText @bind-Value=tmpUser.Username class="form-control" id="Username" />
        <ValidationMessage For="@(() => tmpUser.Username)" />
    </div>
    <div class="form-group" style="padding-top:8px;">
        <input type="submit" class="btn btn-primary" value="Save" />
        <input type="button" class="btn btn-secondary" value="Continue as Guest" @onclick="ContinueAsGuest" />
    </div>
</EditForm>
</div>


@code {
    [Inject] protected ILeaderboardService LeaderboardService { get; set; }
    [Inject] protected IJSRuntime JSRuntime { get; set; }
    [Inject] protected User UserService { get; set; }
    [Inject] protected NavigationManager navigator { get; set; }

    private User tmpUser = new User(); // Creating a temporary user for data-binding.

    private async Task ContinueAsGuest()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to continue as a guest? Your score will not be saved on the leaderboard.");
        if (confirmed)
        {
            UserService.Username = "Guest";
            UserService.IsGuest = true;
            navigator.NavigateTo("/");
        }
    }

    private void Submit()
    {
        // Only assigning a username since the rest will be configured once they've played the game.
        UserService.Username = tmpUser.Username;
        navigator.NavigateTo("/");
    }

}
